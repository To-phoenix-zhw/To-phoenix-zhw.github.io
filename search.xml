<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>现代软件工程第7-8周学习</title>
    <url>/2020/10/19/%E7%8E%B0%E4%BB%A3%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E7%AC%AC7-8%E5%91%A8%E5%AD%A6%E4%B9%A0/</url>
    <content><![CDATA[<p>去年搭建了该博客，中途把他修改了之后拿去参加网页设计大赛，现在要重新恢复他的博客身份，并在全新的本地仓库中进行操作。</p>
<p>hexo上传到github上的只是生成的public文件夹，其中是相关的html文件，要进行修改和持续更新博客，需要重新部署hexo环境。</p>
<h1 id="①-找到最初版本的commit，以该commit创建新分支blog"><a href="#①-找到最初版本的commit，以该commit创建新分支blog" class="headerlink" title="① 找到最初版本的commit，以该commit创建新分支blog"></a>① 找到最初版本的commit，以该commit创建新分支blog</h1><h1 id="②-将该分支作为default默认分支，clone对应分支内容到本地"><a href="#②-将该分支作为default默认分支，clone对应分支内容到本地" class="headerlink" title="② 将该分支作为default默认分支，clone对应分支内容到本地"></a>② 将该分支作为default默认分支，clone对应分支内容到本地</h1><p>问题：github上clone太慢，用码云中转解决</p>
<h2 id="I-码云导入github仓库；"><a href="#I-码云导入github仓库；" class="headerlink" title="I.码云导入github仓库；"></a>I.码云导入github仓库；</h2><h2 id="II-从码云上进行克隆"><a href="#II-从码云上进行克隆" class="headerlink" title="II.从码云上进行克隆"></a>II.从码云上进行克隆</h2><img src="/2020/10/19/%E7%8E%B0%E4%BB%A3%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E7%AC%AC7-8%E5%91%A8%E5%AD%A6%E4%B9%A0/1.png" class title="This is an example image">

<h2 id="III-进入目录，更改get-url"><a href="#III-进入目录，更改get-url" class="headerlink" title="III.进入目录，更改get-url"></a>III.进入目录，更改get-url</h2><img src="/2020/10/19/%E7%8E%B0%E4%BB%A3%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E7%AC%AC7-8%E5%91%A8%E5%AD%A6%E4%B9%A0/2.png" class title="This is an example image">

<h2 id="IV-远程同步"><a href="#IV-远程同步" class="headerlink" title="IV.远程同步"></a>IV.远程同步</h2><p>注意加对应分支名</p>
<img src="/2020/10/19/%E7%8E%B0%E4%BB%A3%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E7%AC%AC7-8%E5%91%A8%E5%AD%A6%E4%B9%A0/3.png" class title="This is an example image">

<h1 id="③-设置hexo"><a href="#③-设置hexo" class="headerlink" title="③ 设置hexo"></a>③ 设置hexo</h1><h2 id="I-安装hexo"><a href="#I-安装hexo" class="headerlink" title="I.安装hexo"></a>I.安装hexo</h2><img src="/2020/10/19/%E7%8E%B0%E4%BB%A3%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E7%AC%AC7-8%E5%91%A8%E5%AD%A6%E4%B9%A0/4.png" class title="This is an example image">

<h2 id="II-回到上级目录，新建文件夹hexo，并初始化hexo"><a href="#II-回到上级目录，新建文件夹hexo，并初始化hexo" class="headerlink" title="II.回到上级目录，新建文件夹hexo，并初始化hexo"></a>II.回到上级目录，新建文件夹hexo，并初始化hexo</h2><img src="/2020/10/19/%E7%8E%B0%E4%BB%A3%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E7%AC%AC7-8%E5%91%A8%E5%AD%A6%E4%B9%A0/5.png" class title="This is an example image">

<p>​    使用淘宝镜像：否则git卡住无法进行</p>
<img src="/2020/10/19/%E7%8E%B0%E4%BB%A3%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E7%AC%AC7-8%E5%91%A8%E5%AD%A6%E4%B9%A0/6.png" class title="This is an example image">

<h2 id="III-生成并启动服务"><a href="#III-生成并启动服务" class="headerlink" title="III.生成并启动服务"></a>III.生成并启动服务</h2><img src="/2020/10/19/%E7%8E%B0%E4%BB%A3%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E7%AC%AC7-8%E5%91%A8%E5%AD%A6%E4%B9%A0/7.png" class title="This is an example image">

<img src="/2020/10/19/%E7%8E%B0%E4%BB%A3%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E7%AC%AC7-8%E5%91%A8%E5%AD%A6%E4%B9%A0/8.png" class title="This is an example image">

<p>执行以上命令后，hexo就会在public文件夹生成相关html、js、css文件，将来会被提交到github上面。</p>
<h1 id="④-更改主题"><a href="#④-更改主题" class="headerlink" title="④ 更改主题"></a>④ 更改主题</h1><p>选择了一个喜欢的风格配置主题：</p>
<img src="/2020/10/19/%E7%8E%B0%E4%BB%A3%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E7%AC%AC7-8%E5%91%A8%E5%AD%A6%E4%B9%A0/9.png" class title="This is an example image">

<p>克隆下来之后放到theme文件夹里，并修改根目录下_config.yml文件配置主题</p>
<img src="/2020/10/19/%E7%8E%B0%E4%BB%A3%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E7%AC%AC7-8%E5%91%A8%E5%AD%A6%E4%B9%A0/10.png" class title="This is an example image">

<p>重新执行<code>hexo g</code>重新生成并预览。界面已生效。</p>
<img src="/2020/10/19/%E7%8E%B0%E4%BB%A3%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E7%AC%AC7-8%E5%91%A8%E5%AD%A6%E4%B9%A0/11.png" class title="This is an example image">

<h1 id="⑤-上传到github"><a href="#⑤-上传到github" class="headerlink" title="⑤ 上传到github"></a>⑤ 上传到github</h1><h2 id="I-配置-config-yml中有关deploy的部分"><a href="#I-配置-config-yml中有关deploy的部分" class="headerlink" title="I.配置_config.yml中有关deploy的部分"></a>I.配置_config.yml中有关deploy的部分</h2><img src="/2020/10/19/%E7%8E%B0%E4%BB%A3%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E7%AC%AC7-8%E5%91%A8%E5%AD%A6%E4%B9%A0/12.png" class title="This is an example image">

<h2 id="II-安装插件"><a href="#II-安装插件" class="headerlink" title="II.安装插件"></a>II.安装插件</h2><img src="/2020/10/19/%E7%8E%B0%E4%BB%A3%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E7%AC%AC7-8%E5%91%A8%E5%AD%A6%E4%B9%A0/13.png" class title="This is an example image">

<h2 id="III-推到远程仓库"><a href="#III-推到远程仓库" class="headerlink" title="III.推到远程仓库"></a>III.推到远程仓库</h2><img src="/2020/10/19/%E7%8E%B0%E4%BB%A3%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E7%AC%AC7-8%E5%91%A8%E5%AD%A6%E4%B9%A0/14.png" class title="This is an example image">

<p>可以看到该网址已生效</p>
<img src="/2020/10/19/%E7%8E%B0%E4%BB%A3%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E7%AC%AC7-8%E5%91%A8%E5%AD%A6%E4%B9%A0/15.png" class title="This is an example image">

<h1 id="⑥-常用hexo命令"><a href="#⑥-常用hexo命令" class="headerlink" title="⑥ 常用hexo命令"></a>⑥ 常用hexo命令</h1><p><code>hexo new &quot;postName&quot;</code></p>
<p><code>hexo new page &quot;pageName&quot;</code> #新建页面<br><code>hexo generate</code> #生成静态页面至public目录<br><code>hexo server</code> #开启预览访问端口（默认端口4000，’ctrl + c’关闭server）<br><code>hexo deploy</code> #部署到GitHub<br><code>hexo help</code>  # 查看帮助<br><code>hexo version</code>  #查看Hexo的版本</p>
<p>缩写：</p>
<p><code>hexo n == hexo new</code><br><code>hexo g == hexo generate</code><br><code>hexo s == hexo server</code><br><code>hexo d == hexo deploy</code></p>
<p>组合命令</p>
<p><code>hexo s -g</code> #生成并本地预览</p>
<p><code>hexo d -g</code>#生成并上传</p>
<h1 id="⑦-网站设置"><a href="#⑦-网站设置" class="headerlink" title="⑦ 网站设置"></a>⑦ 网站设置</h1><p>I.添加一个包含站点内所有标签的标签页</p>
<p>生成标签页</p>
<img src="/2020/10/19/%E7%8E%B0%E4%BB%A3%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E7%AC%AC7-8%E5%91%A8%E5%AD%A6%E4%B9%A0/16.png" class title="This is an example image">

<p>将类型设为tag</p>
<img src="/2020/10/19/%E7%8E%B0%E4%BB%A3%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E7%AC%AC7-8%E5%91%A8%E5%AD%A6%E4%B9%A0/17.png" class title="This is an example image">

<p>在<strong>主题</strong>的_config.yml文件中加入标签页</p>
<img src="/2020/10/19/%E7%8E%B0%E4%BB%A3%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E7%AC%AC7-8%E5%91%A8%E5%AD%A6%E4%B9%A0/18.png" class title="This is an example image">

<p>II.添加一个包含站点内所有分类的分类页</p>
<p>创建分类页</p>
<img src="/2020/10/19/%E7%8E%B0%E4%BB%A3%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E7%AC%AC7-8%E5%91%A8%E5%AD%A6%E4%B9%A0/19.png" class title="This is an example image">

<p>将类型设为categories</p>
<img src="/2020/10/19/%E7%8E%B0%E4%BB%A3%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E7%AC%AC7-8%E5%91%A8%E5%AD%A6%E4%B9%A0/20.png" class title="This is an example image">

<p><strong>主题</strong>的_config.yml文件中已加入标签页</p>
<p>III.添加关于页等其他菜单项</p>
<p>按照上述相同步骤</p>
<p>IV.配置数学支持</p>
<h1 id="⑦-添加文章内容"><a href="#⑦-添加文章内容" class="headerlink" title="⑦ 添加文章内容"></a>⑦ 添加文章内容</h1><p>首先在hexo文件夹下进行git bash</p>
<p>接着使用上述命令进行添加</p>
<h1 id="⑧-本地图片内容无法显示"><a href="#⑧-本地图片内容无法显示" class="headerlink" title="⑧ 本地图片内容无法显示"></a>⑧ 本地图片内容无法显示</h1><p>I.安装图片路径转换插件</p>
<img src="/2020/10/19/%E7%8E%B0%E4%BB%A3%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E7%AC%AC7-8%E5%91%A8%E5%AD%A6%E4%B9%A0/21.png" class title="This is an example image">

<p>II.修改文件/node_modules/hexo-asset-image/index.js</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="meta">&#x27;use strict&#x27;</span>;</span><br><span class="line"><span class="keyword">var</span> cheerio = <span class="built_in">require</span>(<span class="string">&#x27;cheerio&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// http://stackoverflow.com/questions/14480345/how-to-get-the-nth-occurrence-in-a-string</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getPosition</span>(<span class="params">str, m, i</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> str.split(m, i).join(m).length;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> version = <span class="built_in">String</span>(hexo.version).split(<span class="string">&#x27;.&#x27;</span>);</span><br><span class="line">hexo.extend.filter.register(<span class="string">&#x27;after_post_render&#x27;</span>, <span class="function"><span class="keyword">function</span>(<span class="params">data</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">var</span> config = hexo.config;</span><br><span class="line">  <span class="function"><span class="title">if</span>(<span class="params">config.post_asset_folder</span>)</span>&#123;</span><br><span class="line">    	<span class="keyword">var</span> link = data.permalink;</span><br><span class="line">	<span class="keyword">if</span>(version.length &gt; <span class="number">0</span> &amp;&amp; <span class="built_in">Number</span>(version[<span class="number">0</span>]) == <span class="number">3</span>)</span><br><span class="line">	   <span class="keyword">var</span> beginPos = getPosition(link, <span class="string">&#x27;/&#x27;</span>, <span class="number">1</span>) + <span class="number">1</span>;</span><br><span class="line">	<span class="keyword">else</span></span><br><span class="line">	   <span class="keyword">var</span> beginPos = getPosition(link, <span class="string">&#x27;/&#x27;</span>, <span class="number">3</span>) + <span class="number">1</span>;</span><br><span class="line">	<span class="comment">// In hexo 3.1.1, the permalink of &quot;about&quot; page is like &quot;.../about/index.html&quot;.</span></span><br><span class="line">	<span class="keyword">var</span> endPos = link.lastIndexOf(<span class="string">&#x27;/&#x27;</span>) + <span class="number">1</span>;</span><br><span class="line">    link = link.substring(beginPos, endPos);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> toprocess = [<span class="string">&#x27;excerpt&#x27;</span>, <span class="string">&#x27;more&#x27;</span>, <span class="string">&#x27;content&#x27;</span>];</span><br><span class="line">    <span class="function"><span class="title">for</span>(<span class="params"><span class="keyword">var</span> i = <span class="number">0</span>; i &lt; toprocess.length; i++</span>)</span>&#123;</span><br><span class="line">      <span class="keyword">var</span> key = toprocess[i];</span><br><span class="line"> </span><br><span class="line">      <span class="keyword">var</span> $ = cheerio.load(data[key], &#123;</span><br><span class="line">        ignoreWhitespace: <span class="literal">false</span>,</span><br><span class="line">        xmlMode: <span class="literal">false</span>,</span><br><span class="line">        lowerCaseTags: <span class="literal">false</span>,</span><br><span class="line">        decodeEntities: <span class="literal">false</span></span><br><span class="line">      &#125;);</span><br><span class="line"></span><br><span class="line">      $(<span class="string">&#x27;img&#x27;</span>).each(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">		<span class="keyword">if</span> ($(<span class="built_in">this</span>).attr(<span class="string">&#x27;src&#x27;</span>))&#123;</span><br><span class="line">			<span class="comment">// For windows style path, we replace &#x27;\&#x27; to &#x27;/&#x27;.</span></span><br><span class="line">			<span class="keyword">var</span> src = $(<span class="built_in">this</span>).attr(<span class="string">&#x27;src&#x27;</span>).replace(<span class="string">&#x27;\\&#x27;</span>, <span class="string">&#x27;/&#x27;</span>);</span><br><span class="line">			<span class="keyword">if</span>(!<span class="regexp">/http[s]*.*|\/\/.*/</span>.test(src) &amp;&amp;</span><br><span class="line">			   !<span class="regexp">/^\s*\//</span>.test(src)) &#123;</span><br><span class="line">			  <span class="comment">// For &quot;about&quot; page, the first part of &quot;src&quot; can&#x27;t be removed.</span></span><br><span class="line">			  <span class="comment">// In addition, to support multi-level local directory.</span></span><br><span class="line">			  <span class="keyword">var</span> linkArray = link.split(<span class="string">&#x27;/&#x27;</span>).filter(<span class="function"><span class="keyword">function</span>(<span class="params">elem</span>)</span>&#123;</span><br><span class="line">				<span class="keyword">return</span> elem != <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">			  &#125;);</span><br><span class="line">			  <span class="keyword">var</span> srcArray = src.split(<span class="string">&#x27;/&#x27;</span>).filter(<span class="function"><span class="keyword">function</span>(<span class="params">elem</span>)</span>&#123;</span><br><span class="line">				<span class="keyword">return</span> elem != <span class="string">&#x27;&#x27;</span> &amp;&amp; elem != <span class="string">&#x27;.&#x27;</span>;</span><br><span class="line">			  &#125;);</span><br><span class="line">			  <span class="keyword">if</span>(srcArray.length &gt; <span class="number">1</span>)</span><br><span class="line">				srcArray.shift();</span><br><span class="line">			  src = srcArray.join(<span class="string">&#x27;/&#x27;</span>);</span><br><span class="line">			  $(<span class="built_in">this</span>).attr(<span class="string">&#x27;src&#x27;</span>, config.root + link + src);</span><br><span class="line">			  <span class="built_in">console</span>.info&amp;&amp;<span class="built_in">console</span>.info(<span class="string">&quot;update link as:--&gt;&quot;</span>+config.root + link + src);</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">			<span class="built_in">console</span>.info&amp;&amp;<span class="built_in">console</span>.info(<span class="string">&quot;no src attr, skipped...&quot;</span>);</span><br><span class="line">			<span class="built_in">console</span>.info&amp;&amp;<span class="built_in">console</span>.info($(<span class="built_in">this</span>));</span><br><span class="line">		&#125;</span><br><span class="line">      &#125;);</span><br><span class="line">      data[key] = $.html();</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>III.打开_config.yml文件，修改下述内容</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">post_asset_folder: true</span><br></pre></td></tr></table></figure>

<p>IV.将图片放到同目录的同名文件夹下，并以如下方式引用</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;% asset_img 1.png This is an example image %&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>现代软件工程</category>
      </categories>
      <tags>
        <tag>-现代软件工程 -博客搭建</tag>
      </tags>
  </entry>
  <entry>
    <title>现代软件工程第8-9周</title>
    <url>/2020/10/26/%E7%8E%B0%E4%BB%A3%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E7%AC%AC8-9%E5%91%A8/</url>
    <content><![CDATA[<p>本周实现了黄金点游戏的程序，可以在DOS窗口中进行游戏</p>
<p>代码中用c++标准库的优先队列来进行排序，一个一个弹栈，最先弹出的是最高分，给N分，最后弹出的是最低分，给-2分。代码如下：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXN = <span class="number">1010</span>; <span class="comment">// 最大人数</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXK = <span class="number">1010</span>; <span class="comment">// 最大轮数</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> golden = <span class="number">0.618</span>;</span><br><span class="line"><span class="keyword">double</span> num[MAXN][MAXK]; </span><br><span class="line"><span class="keyword">int</span> N; <span class="comment">// 玩游戏的人数</span></span><br><span class="line"><span class="keyword">int</span> K; <span class="comment">// 游戏的轮数</span></span><br><span class="line"><span class="keyword">double</span> cur_score[MAXN][MAXK]; <span class="comment">// 每个人当前局的得分</span></span><br><span class="line"><span class="keyword">double</span> acc_score[MAXN][MAXK]; <span class="comment">// 每个人累计到当前局的总分</span></span><br><span class="line"><span class="keyword">double</span> dist[MAXN]; <span class="comment">// 每个人当前和G值的差距</span></span><br><span class="line"><span class="keyword">double</span> G[MAXK]; <span class="comment">// 每一轮的G值</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">Node1</span>&#123;</span></span><br><span class="line">	<span class="keyword">int</span> id;</span><br><span class="line">	<span class="keyword">double</span> dist;</span><br><span class="line">	Node1(<span class="keyword">int</span> id, <span class="keyword">double</span> dist) &#123;</span><br><span class="line">		<span class="keyword">this</span>-&gt;id = id;</span><br><span class="line">		<span class="keyword">this</span>-&gt;dist = dist;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">bool</span> <span class="keyword">operator</span> &lt; (<span class="keyword">const</span> Node1&amp; B) <span class="keyword">const</span> &#123;</span><br><span class="line">		<span class="keyword">return</span> dist &gt; B.dist;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;Node1;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">Node2</span>&#123;</span></span><br><span class="line">	<span class="keyword">int</span> id;</span><br><span class="line">	<span class="keyword">double</span> score;</span><br><span class="line">	Node2(<span class="keyword">int</span> id, <span class="keyword">double</span> score) &#123;</span><br><span class="line">		<span class="keyword">this</span>-&gt;id = id;</span><br><span class="line">		<span class="keyword">this</span>-&gt;score = score;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">bool</span> <span class="keyword">operator</span> &lt; (<span class="keyword">const</span> Node2&amp; B) <span class="keyword">const</span> &#123;</span><br><span class="line">		<span class="keyword">return</span> score &lt; B.score;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;Node2;</span><br><span class="line"></span><br><span class="line"><span class="built_in">priority_queue</span>&lt;Node1&gt; Q1; <span class="comment">// 按当前得分排 </span></span><br><span class="line"><span class="built_in">priority_queue</span>&lt;Node2&gt; Q2; <span class="comment">// 按累计得分排 </span></span><br><span class="line"><span class="keyword">int</span> Lowest[MAXK]; <span class="comment">// 该轮最高的id </span></span><br><span class="line"><span class="keyword">int</span> Highest[MAXK];  <span class="comment">// 该轮最低的id </span></span><br><span class="line"><span class="keyword">int</span> Lowest_all[MAXK]; <span class="comment">// 总轮最低的id</span></span><br><span class="line"><span class="keyword">int</span> Highest_all[MAXK]; <span class="comment">// 总轮最高的id</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	freopen(<span class="string">&quot;data1.in&quot;</span>, <span class="string">&quot;r&quot;</span>, <span class="built_in">stdin</span>);</span><br><span class="line">	</span><br><span class="line">	</span><br><span class="line">	</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;请输入玩游戏的人数和总共的局数:\n&quot;</span>);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;N, &amp;K);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= K; i++) &#123; <span class="comment">// 第i局 </span></span><br><span class="line">        <span class="keyword">double</span> all = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= N; j++) &#123; <span class="comment">// 第j个人 </span></span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">&quot;%lf&quot;</span>, &amp;num[j][i]);</span><br><span class="line">            all += num[j][i];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">double</span> average = all / N;</span><br><span class="line">        <span class="keyword">double</span> G = average * golden;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;第%d轮的G值:%lf\n&quot;</span>, i, G);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= N; j++) &#123;</span><br><span class="line">            dist[j] = <span class="built_in">fabs</span>(G-num[j][i]);</span><br><span class="line">            Q1.push(Node1(j, dist[j]));</span><br><span class="line">        &#125;</span><br><span class="line">        Node1 highest = Q1.top(); <span class="comment">// 最近的取出来给N分 </span></span><br><span class="line">        Q1.pop();</span><br><span class="line">        cur_score[highest.id][i] = N;</span><br><span class="line">        Highest[i] = highest.id;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">int</span> temp = highest.id;</span><br><span class="line">        <span class="keyword">while</span> (Q1.empty() == <span class="literal">false</span>) &#123; <span class="comment">// 剩下的依次出队，最后一个给-2分 </span></span><br><span class="line">        	Node1 cur = Q1.top();</span><br><span class="line">        	Q1.pop();</span><br><span class="line">        	<span class="keyword">int</span> cur_id = cur.id;</span><br><span class="line">        	temp = cur_id;</span><br><span class="line">        	cur_score[cur_id][i] = <span class="number">0</span>;</span><br><span class="line">		&#125;</span><br><span class="line">        cur_score[temp][i] = <span class="number">-2</span>; <span class="comment">// temp记录的最后一个附0分 </span></span><br><span class="line">        Lowest[i] = temp;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= N; j++) &#123;</span><br><span class="line">            acc_score[j][i] = acc_score[j][i<span class="number">-1</span>] + cur_score[j][i];</span><br><span class="line">            Q2.push(Node2(j, acc_score[j][i])); </span><br><span class="line">        &#125;</span><br><span class="line">        Node2 total_highest = Q2.top();</span><br><span class="line">        Q2.pop();</span><br><span class="line">        Highest_all[i] = total_highest.id;</span><br><span class="line">        </span><br><span class="line">        temp = total_highest.id;</span><br><span class="line">        <span class="keyword">while</span> (Q2.empty() == <span class="literal">false</span>) &#123; <span class="comment">// 剩下的依次出队，最后一个给-2分 </span></span><br><span class="line">        	Node2 cur = Q2.top();</span><br><span class="line">        	Q2.pop();</span><br><span class="line">        	<span class="keyword">int</span> cur_id = cur.id;</span><br><span class="line">        	temp = cur_id;</span><br><span class="line">		&#125;</span><br><span class="line">        Lowest_all[i] = temp;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= K; i++) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;第%d轮的获得了N分的玩家是%d号玩家，其累计得分:%lf\n&quot;</span>, i, Highest[i], acc_score[Highest[i]][i]);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;第%d轮的获得了-2分的玩家是%d号玩家，其累计得分:%lf\n&quot;</span>, i, Lowest[i], acc_score[Lowest[i]][i]);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;目前最高分的玩家是%d号玩家，其累计得分:%lf\n&quot;</span>, Highest_all[i], acc_score[Highest_all[i]][i]);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;目前最低分的玩家是%d号玩家，其累计得分:%lf\n&quot;</span>, Lowest_all[i], acc_score[Lowest_all[i]][i]);</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;---------------\n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



]]></content>
      <categories>
        <category>现代软件工程</category>
      </categories>
      <tags>
        <tag>-现代软件工程</tag>
      </tags>
  </entry>
  <entry>
    <title>现代软件工程第9-10周</title>
    <url>/2020/11/02/%E7%8E%B0%E4%BB%A3%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E7%AC%AC9-10%E5%91%A8/</url>
    <content><![CDATA[<p>这周进行了图形界面的搭建，安装了pyqt5和pyqt5-tools，并在此基础上进行图形界面开发。</p>
<p>然而相关逻辑还需要进行调整。</p>
<p>因为之前从未学习过QT，所以目前黄金点游戏的图形界面还在开发，以下代码为学习pyqt时写的代码，正式的游戏图形界面代码还未完成。</p>
<p>因为将逻辑与功能分离，所以有两个python文件，执行时是执行main.py文件。</p>
<p>图形界面设计文件：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> PyQt5 <span class="keyword">import</span> QtCore, QtGui, QtWidgets</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Ui_MainWindow</span>(<span class="params"><span class="built_in">object</span></span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">setupUi</span>(<span class="params">self, MainWindow</span>):</span></span><br><span class="line">        MainWindow.setObjectName(<span class="string">&quot;MainWindow&quot;</span>)</span><br><span class="line">        MainWindow.resize(<span class="number">678</span>, <span class="number">155</span>)</span><br><span class="line">        self.centralwidget = QtWidgets.QWidget(MainWindow)</span><br><span class="line">        self.centralwidget.setObjectName(<span class="string">&quot;centralwidget&quot;</span>)</span><br><span class="line">        self.gridLayout = QtWidgets.QGridLayout(self.centralwidget)</span><br><span class="line">        self.gridLayout.setObjectName(<span class="string">&quot;gridLayout&quot;</span>)</span><br><span class="line">        self.label = QtWidgets.QLabel(self.centralwidget)</span><br><span class="line">        self.label.setTextFormat(QtCore.Qt.AutoText)</span><br><span class="line">        self.label.setScaledContents(<span class="literal">False</span>)</span><br><span class="line">        self.label.setOpenExternalLinks(<span class="literal">False</span>)</span><br><span class="line">        self.label.setObjectName(<span class="string">&quot;label&quot;</span>)</span><br><span class="line">        self.gridLayout.addWidget(self.label, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>)</span><br><span class="line">        self.lineEdit = QtWidgets.QLineEdit(self.centralwidget)</span><br><span class="line">        self.lineEdit.setObjectName(<span class="string">&quot;lineEdit&quot;</span>)</span><br><span class="line">        self.gridLayout.addWidget(self.lineEdit, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>)</span><br><span class="line">        self.label_2 = QtWidgets.QLabel(self.centralwidget)</span><br><span class="line">        self.label_2.setObjectName(<span class="string">&quot;label_2&quot;</span>)</span><br><span class="line">        self.gridLayout.addWidget(self.label_2, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>)</span><br><span class="line">        self.pushButton = QtWidgets.QPushButton(self.centralwidget)</span><br><span class="line">        self.pushButton.setObjectName(<span class="string">&quot;pushButton&quot;</span>)</span><br><span class="line">        self.gridLayout.addWidget(self.pushButton, <span class="number">1</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">1</span>)</span><br><span class="line">        self.lineEdit_2 = QtWidgets.QLineEdit(self.centralwidget)</span><br><span class="line">        self.lineEdit_2.setObjectName(<span class="string">&quot;lineEdit_2&quot;</span>)</span><br><span class="line">        self.gridLayout.addWidget(self.lineEdit_2, <span class="number">1</span>, <span class="number">3</span>, <span class="number">1</span>, <span class="number">1</span>)</span><br><span class="line">        self.label_3 = QtWidgets.QLabel(self.centralwidget)</span><br><span class="line">        self.label_3.setObjectName(<span class="string">&quot;label_3&quot;</span>)</span><br><span class="line">        self.gridLayout.addWidget(self.label_3, <span class="number">1</span>, <span class="number">4</span>, <span class="number">1</span>, <span class="number">1</span>)</span><br><span class="line">        MainWindow.setCentralWidget(self.centralwidget)</span><br><span class="line">        self.menubar = QtWidgets.QMenuBar(MainWindow)</span><br><span class="line">        self.menubar.setGeometry(QtCore.QRect(<span class="number">0</span>, <span class="number">0</span>, <span class="number">678</span>, <span class="number">26</span>))</span><br><span class="line">        self.menubar.setObjectName(<span class="string">&quot;menubar&quot;</span>)</span><br><span class="line">        MainWindow.setMenuBar(self.menubar)</span><br><span class="line">        self.statusbar = QtWidgets.QStatusBar(MainWindow)</span><br><span class="line">        self.statusbar.setObjectName(<span class="string">&quot;statusbar&quot;</span>)</span><br><span class="line">        MainWindow.setStatusBar(self.statusbar)</span><br><span class="line"></span><br><span class="line">        self.retranslateUi(MainWindow)</span><br><span class="line">        QtCore.QMetaObject.connectSlotsByName(MainWindow)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">retranslateUi</span>(<span class="params">self, MainWindow</span>):</span></span><br><span class="line">        _translate = QtCore.QCoreApplication.translate</span><br><span class="line">        MainWindow.setWindowTitle(_translate(<span class="string">&quot;MainWindow&quot;</span>, <span class="string">&quot;Conversion&quot;</span>))</span><br><span class="line">        self.label.setText(_translate(<span class="string">&quot;MainWindow&quot;</span>, <span class="string">&quot;汇率转换器&quot;</span>))</span><br><span class="line">        self.label_2.setText(_translate(<span class="string">&quot;MainWindow&quot;</span>, <span class="string">&quot;USD&quot;</span>))</span><br><span class="line">        self.pushButton.setText(_translate(<span class="string">&quot;MainWindow&quot;</span>, <span class="string">&quot;转换！&quot;</span>))</span><br><span class="line">        self.label_3.setText(_translate(<span class="string">&quot;MainWindow&quot;</span>, <span class="string">&quot;CNY&quot;</span>))</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>main.py文件：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">from</span> PyQt5.QtWidgets <span class="keyword">import</span> QApplication, QMainWindow</span><br><span class="line"><span class="keyword">from</span> functools <span class="keyword">import</span> partial <span class="comment"># 传参</span></span><br><span class="line"><span class="keyword">import</span> HelloWorld2</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">click_success</span>():</span></span><br><span class="line">    print(<span class="string">&quot;HelloWorld2!&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">convert</span>(<span class="params">ui</span>):</span></span><br><span class="line">    <span class="built_in">input</span> = ui.lineEdit.text()</span><br><span class="line">    result = <span class="built_in">float</span>(<span class="built_in">input</span>) * <span class="number">6.7</span></span><br><span class="line">    ui.lineEdit_2.setText(<span class="built_in">str</span>(result))</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    app = QApplication(sys.argv)</span><br><span class="line">    MainWindow = QMainWindow()</span><br><span class="line">    ui = HelloWorld2.Ui_MainWindow()</span><br><span class="line">    ui.setupUi(MainWindow)</span><br><span class="line">    MainWindow.show()</span><br><span class="line">    <span class="comment"># ui.pushButton.clicked.connect(click_success)</span></span><br><span class="line">    ui.pushButton.clicked.connect(partial(convert, ui))</span><br><span class="line"></span><br><span class="line">    sys.exit(app.exec_())</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>现代软件工程</category>
      </categories>
      <tags>
        <tag>-现代软件工程</tag>
      </tags>
  </entry>
  <entry>
    <title>现代软件工程第11-12周</title>
    <url>/2020/11/16/%E7%8E%B0%E4%BB%A3%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E7%AC%AC11-12%E5%91%A8/</url>
    <content><![CDATA[<h1 id="一、完善PyQt搭建的图形界面"><a href="#一、完善PyQt搭建的图形界面" class="headerlink" title="一、完善PyQt搭建的图形界面"></a>一、完善PyQt搭建的图形界面</h1><p>这周完善了PyQt搭建的图形界面。</p>
<p>PyQt搭建图形界面使小组对项目有了更深的理解，后续我们将采用开发网站的方式形成最终的黄金点游戏。</p>
<h1 id="二、引入OCR手写识别功能"><a href="#二、引入OCR手写识别功能" class="headerlink" title="二、引入OCR手写识别功能"></a>二、引入OCR手写识别功能</h1><p>调用了飞桨和腾讯云的OCR手写字体识别功能，扩展游戏功能，使得游戏支持玩家将数字写在纸条上再进行黄金点游戏的方式。</p>
<h1 id="三、用Django框架搭建起网站"><a href="#三、用Django框架搭建起网站" class="headerlink" title="三、用Django框架搭建起网站"></a>三、用Django框架搭建起网站</h1><p>首先在本地利用Bootstrap框架进行前端开发，并用Django矿建进行后端开发，搭建网站。后续将网站部署到阿里云服务器上，使得互联网的用户可以联网玩这个游戏。</p>
]]></content>
      <categories>
        <category>现代软件工程</category>
      </categories>
      <tags>
        <tag>-现代软件工程</tag>
      </tags>
  </entry>
</search>
